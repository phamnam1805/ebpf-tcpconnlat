// Code generated by bpf2go; DO NOT EDIT.
//go:build mips || mips64 || ppc64 || s390x

package probe

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"
	"structs"

	"github.com/cilium/ebpf"
)

type probePiddata struct {
	_    structs.HostLayout
	Comm [16]int8
	Ts   uint64
	Tgid uint32
	_    [4]byte
}

// loadProbe returns the embedded CollectionSpec for probe.
func loadProbe() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_ProbeBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load probe: %w", err)
	}

	return spec, err
}

// loadProbeObjects loads probe and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*probeObjects
//	*probePrograms
//	*probeMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadProbeObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadProbe()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// probeSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type probeSpecs struct {
	probeProgramSpecs
	probeMapSpecs
	probeVariableSpecs
}

// probeProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type probeProgramSpecs struct {
	FentryTcpRcvStateProcess *ebpf.ProgramSpec `ebpf:"fentry_tcp_rcv_state_process"`
	FentryTcpV4Connect       *ebpf.ProgramSpec `ebpf:"fentry_tcp_v4_connect"`
	FentryTcpV6Connect       *ebpf.ProgramSpec `ebpf:"fentry_tcp_v6_connect"`
}

// probeMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type probeMapSpecs struct {
	Events *ebpf.MapSpec `ebpf:"events"`
	Start  *ebpf.MapSpec `ebpf:"start"`
}

// probeVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type probeVariableSpecs struct {
	TargMinUs *ebpf.VariableSpec `ebpf:"targ_min_us"`
	TargTgid  *ebpf.VariableSpec `ebpf:"targ_tgid"`
}

// probeObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadProbeObjects or ebpf.CollectionSpec.LoadAndAssign.
type probeObjects struct {
	probePrograms
	probeMaps
	probeVariables
}

func (o *probeObjects) Close() error {
	return _ProbeClose(
		&o.probePrograms,
		&o.probeMaps,
	)
}

// probeMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadProbeObjects or ebpf.CollectionSpec.LoadAndAssign.
type probeMaps struct {
	Events *ebpf.Map `ebpf:"events"`
	Start  *ebpf.Map `ebpf:"start"`
}

func (m *probeMaps) Close() error {
	return _ProbeClose(
		m.Events,
		m.Start,
	)
}

// probeVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadProbeObjects or ebpf.CollectionSpec.LoadAndAssign.
type probeVariables struct {
	TargMinUs *ebpf.Variable `ebpf:"targ_min_us"`
	TargTgid  *ebpf.Variable `ebpf:"targ_tgid"`
}

// probePrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadProbeObjects or ebpf.CollectionSpec.LoadAndAssign.
type probePrograms struct {
	FentryTcpRcvStateProcess *ebpf.Program `ebpf:"fentry_tcp_rcv_state_process"`
	FentryTcpV4Connect       *ebpf.Program `ebpf:"fentry_tcp_v4_connect"`
	FentryTcpV6Connect       *ebpf.Program `ebpf:"fentry_tcp_v6_connect"`
}

func (p *probePrograms) Close() error {
	return _ProbeClose(
		p.FentryTcpRcvStateProcess,
		p.FentryTcpV4Connect,
		p.FentryTcpV6Connect,
	)
}

func _ProbeClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed probe_bpfeb.o
var _ProbeBytes []byte
